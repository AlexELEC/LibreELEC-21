From c499e3bd77cc354208bf3491def5c1cca4a3dc1a Mon Sep 17 00:00:00 2001
From: Dmitry_L <freebox_2002@mail.ru>
Date: Fri, 25 Feb 2022 14:03:54 +0300
Subject: [PATCH] Resolution: Fix the logic for resolution refresh rate
 switching

Fixed refresh rate switching for non-standard 4K and more higher 5K, 8K resolutions.
Fixed correct switching while playing video file in bigger resolution and opening video file with lower resolution.
Fixed using double refresh rate with whitelist.
---
 xbmc/windowing/Resolution.cpp | 67 ++++++++++++++++++++++++++++++++---
 1 file changed, 63 insertions(+), 4 deletions(-)

diff --git a/xbmc/windowing/Resolution.cpp b/xbmc/windowing/Resolution.cpp
index 8d9af0603e..f9f6464fbb 100644
--- a/xbmc/windowing/Resolution.cpp
+++ b/xbmc/windowing/Resolution.cpp
@@ -89,6 +89,7 @@ RESOLUTION CResolutionUtils::ChooseBestResolution(float fps, int width, int heig
 void CResolutionUtils::FindResolutionFromWhitelist(float fps, int width, int height, bool is3D, RESOLUTION &resolution)
 {
   RESOLUTION_INFO curr = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(resolution);
+  const RESOLUTION_INFO desktop_info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(CDisplaySettings::GetInstance().GetCurrentResolution());
   CLog::Log(LOGINFO,
             "[WHITELIST] Searching the whitelist for: width: {}, height: {}, fps: {:0.3f}, 3D: {}",
             width, height, fps, is3D ? "true" : "false");
@@ -108,7 +109,8 @@ void CResolutionUtils::FindResolutionFromWhitelist(float fps, int width, int hei
     for (const auto& c : candidates)
     {
       info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(c);
-      if (info.iScreenHeight >= curr.iScreenHeight && info.iScreenWidth >= curr.iScreenWidth &&
+      if ((info.iScreenWidth >= desktop_info.iScreenWidth) ||
+          (info.iScreenHeight >= curr.iScreenHeight && info.iScreenWidth >= curr.iScreenWidth) &&
           (info.dwFlags & D3DPRESENTFLAG_MODEMASK) == (curr.dwFlags & D3DPRESENTFLAG_MODEMASK))
       {
         // do not add half refreshrates (25, 29.97 by default) as kodi cannot cope with
@@ -179,7 +181,7 @@ void CResolutionUtils::FindResolutionFromWhitelist(float fps, int width, int hei
                   "[WHITELIST] Matched an exact resolution with double the refresh rate {} ({})",
                   info.strMode, i);
         unsigned int pen = abs(info.iScreenHeight - height) + abs(info.iScreenWidth - width);
-        if (pen < penalty)
+        if (pen <= penalty)
         {
           resolution = i;
           found = true;
@@ -233,10 +235,67 @@ void CResolutionUtils::FindResolutionFromWhitelist(float fps, int width, int hei
     CLog::Log(LOGDEBUG, "[WHITELIST] No match for a resolution with a 3:2 pulldown refresh rate");
   }
 
+  CLog::Log(LOGDEBUG, "[WHITELIST] Searching for a closest resolution with an exact refresh rate");
 
-  CLog::Log(LOGDEBUG, "[WHITELIST] Searching for a desktop resolution with an exact refresh rate");
+  for (const auto& mode : indexList)
+  {
+    auto i = CDisplaySettings::GetInstance().GetResFromString(mode.asString());
+    const RESOLUTION_INFO info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(i);
 
-  const RESOLUTION_INFO desktop_info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(CDisplaySettings::GetInstance().GetCurrentResolution());
+    // allow resolutions that are closest resolutions but have the correct refresh rate
+    if ((info.dwFlags & D3DPRESENTFLAG_MODEMASK) == (desktop_info.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
+        MathUtils::FloatEquals(info.fRefreshRate, fps, 0.01f))
+    {
+      unsigned int pen = abs(info.iScreenHeight - height) + abs(info.iScreenWidth - width);
+      if (pen < penalty)
+      {
+        CLog::Log(LOGDEBUG,
+                  "[WHITELIST] Matched a closest resolution with an exact refresh rate {} ({}), penalty {}",
+                  info.strMode, i, pen);
+        resolution = i;
+        found = true;
+        penalty = pen;
+      }
+    }
+  }
+  if (!found)
+    CLog::Log(LOGDEBUG, "[WHITELIST] No match for a closest resolution with an exact refresh rate");
+
+  if (noWhiteList || CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(
+          SETTING_VIDEOSCREEN_WHITELIST_DOUBLEREFRESHRATE))
+  {
+    CLog::Log(LOGDEBUG, "[WHITELIST] Searching for a closest resolution with double refresh rate");
+
+    for (const auto& mode : indexList)
+    {
+      auto i = CDisplaySettings::GetInstance().GetResFromString(mode.asString());
+      const RESOLUTION_INFO info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(i);
+
+      // allow resolutions that are closest resolutions but have double refresh rate
+      if ((info.dwFlags & D3DPRESENTFLAG_MODEMASK) == (desktop_info.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
+          MathUtils::FloatEquals(info.fRefreshRate, fps * 2, 0.01f))
+      {
+        unsigned int pen = abs(info.iScreenHeight - height) + abs(info.iScreenWidth - width);
+        if (pen <= penalty)
+        {
+          CLog::Log(LOGDEBUG,
+                    "[WHITELIST] Matched a closest resolution with double refresh rate {} ({}), penalty {}",
+                    info.strMode, i, pen);
+          resolution = i;
+          found = true;
+          penalty = pen;
+        }
+      }
+    }
+    if (found)
+      return;
+
+    CLog::Log(LOGDEBUG, "[WHITELIST] No match for a closest resolution with double refresh rate");
+  }
+  else if (found)
+    return;
+
+  CLog::Log(LOGDEBUG, "[WHITELIST] Searching for a desktop resolution with an exact refresh rate");
 
   for (const auto& mode : indexList)
   {
