diff -Naurp kodi-21.0b1-Omega/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.cpp kodi-21.0b1-Omega-patch/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.cpp
--- kodi-21.0b1-Omega/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.cpp	2023-10-18 03:31:05.000000000 +0000
+++ kodi-21.0b1-Omega-patch/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxFFmpeg.cpp	2023-10-28 07:44:14.000000000 +0000
@@ -272,8 +272,7 @@ bool CDVDDemuxFFmpeg::Open(const std::sh
   m_pFormatContext  = avformat_alloc_context();
   m_pFormatContext->interrupt_callback = int_cb;
 
-  // try to abort after 30 seconds
-  m_timeout.Set(30s);
+  auto ffInterruptTimeout = m_pInput->IsRealtime() ? 5s : 30s;
 
   if (m_pInput->IsStreamType(DVDSTREAM_TYPE_FFMPEG))
   {
@@ -289,6 +288,9 @@ bool CDVDDemuxFFmpeg::Open(const std::sh
       // try mmsh, then mmst
       url.SetProtocol("mmsh");
       url.SetProtocolOptions("");
+
+      // Set a timeout for the open input action
+      m_timeout.Set(ffInterruptTimeout);
       result = avformat_open_input(&m_pFormatContext, url.Get().c_str(), iformat, &options);
       if (result < 0)
       {
@@ -301,6 +303,8 @@ bool CDVDDemuxFFmpeg::Open(const std::sh
       std::string strURL = url.Get();
       CLog::Log(LOGDEBUG, "CDVDDemuxFFmpeg::Open() UDP/RTP Original URL '{}'", strURL);
       size_t found = strURL.find("://");
+      // Set a timeout for the open input action
+      m_timeout.Set(ffInterruptTimeout);
       if (found != std::string::npos)
       {
         size_t start = found + 3;
@@ -323,6 +327,8 @@ bool CDVDDemuxFFmpeg::Open(const std::sh
     }
     if (result < 0)
     {
+      // Set a timeout for the open input action
+      m_timeout.Set(ffInterruptTimeout);
       if (avformat_open_input(&m_pFormatContext, strFile.c_str(), iformat, &options) < 0)
       {
         CLog::Log(LOGDEBUG, "Error, could not open file {}", CURL::GetRedacted(strFile));
@@ -336,6 +342,8 @@ bool CDVDDemuxFFmpeg::Open(const std::sh
       m_pFormatContext->interrupt_callback = int_cb;
       AVDictionary* options = GetFFMpegOptionsFromInput();
       av_dict_set_int(&options, "load_all_variants", 0, AV_OPT_SEARCH_CHILDREN);
+      // Set a timeout for the open input action
+      m_timeout.Set(ffInterruptTimeout);
       if (avformat_open_input(&m_pFormatContext, strFile.c_str(), iformat, &options) < 0)
       {
         CLog::Log(LOGDEBUG, "Error, could not open file (2) {}", CURL::GetRedacted(strFile));
@@ -348,6 +356,10 @@ bool CDVDDemuxFFmpeg::Open(const std::sh
   }
   else
   {
+    // Set a timeout of 30 seconds
+    // for the next block of ffmpeg calls
+    m_timeout.Set(30s);
+
     bool seekable = true;
     if (m_pInput->Seek(0, SEEK_POSSIBLE) == 0)
     {
